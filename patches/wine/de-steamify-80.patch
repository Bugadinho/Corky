From c9e5a91b9aa3b21e1b007b6177deb669b4e9b349 Mon Sep 17 00:00:00 2001
From: kotarac <stipe@kotarac.net>
Date: Wed, 24 May 2023 08:34:17 +0200
Subject: [PATCH] de-steamify

---
 dlls/advapi32/advapi.c        |  34 ++++----
 dlls/dbghelp/dwarf.c          |   5 --
 dlls/hidclass.sys/device.c    |   7 +-
 dlls/hidclass.sys/hid.h       |   6 --
 dlls/hidclass.sys/pnp.c       |  12 ---
 dlls/kernelbase/process.c     |  15 ----
 dlls/ntdll/loader.c           |   2 +-
 dlls/ntdll/unix/loader.c      |  59 +-------------
 dlls/secur32/secur32.c        |  15 +---
 dlls/winebus.sys/bus_sdl.c    |   6 +-
 dlls/winex11.drv/window.c     |  15 +---
 dlls/xinput1_3/main.c         | 146 +++++++++++++---------------------
 loader/wine.inf.in            |   1 -
 programs/winedbg/debugger.h   |   1 -
 programs/winedbg/tgt_active.c |  45 -----------
 programs/winedbg/winedbg.c    |   9 +--
 16 files changed, 87 insertions(+), 291 deletions(-)

diff --git a/dlls/advapi32/advapi.c b/dlls/advapi32/advapi.c
index a22e896c88a..6b3ffe2ea25 100644
--- a/dlls/advapi32/advapi.c
+++ b/dlls/advapi32/advapi.c
@@ -44,15 +44,14 @@ WINE_DEFAULT_DEBUG_CHANNEL(advapi);
  */
 BOOL WINAPI GetUserNameA( LPSTR name, LPDWORD size )
 {
-    static const char steamuserA[] = {'s','t','e','a','m','u','s','e','r',0};
-    if(*size < ARRAY_SIZE(steamuserA)){
-        SetLastError( ERROR_INSUFFICIENT_BUFFER );
-        *size = ARRAY_SIZE(steamuserA);
-        return FALSE;
-    }
-    memcpy(name, steamuserA, sizeof(steamuserA));
-    *size = ARRAY_SIZE(steamuserA);
-    return TRUE;
+    DWORD len = GetEnvironmentVariableA( "WINEUSERNAME", name, *size );
+    BOOL ret;
+
+    if (!len) return FALSE;
+    if ((ret = (len < *size))) len++;
+    else SetLastError( ERROR_INSUFFICIENT_BUFFER );
+    *size = len;
+    return ret;
 }
 
 /******************************************************************************
@@ -60,15 +59,14 @@ BOOL WINAPI GetUserNameA( LPSTR name, LPDWORD size )
  */
 BOOL WINAPI GetUserNameW( LPWSTR name, LPDWORD size )
 {
-    static const WCHAR steamuserW[] = {'s','t','e','a','m','u','s','e','r',0};
-    if(*size < ARRAY_SIZE(steamuserW)){
-        SetLastError( ERROR_INSUFFICIENT_BUFFER );
-        *size = ARRAY_SIZE(steamuserW);
-        return FALSE;
-    }
-    memcpy(name, steamuserW, sizeof(steamuserW));
-    *size = ARRAY_SIZE(steamuserW);
-    return TRUE;
+    DWORD len = GetEnvironmentVariableW( L"WINEUSERNAME", name, *size );
+    BOOL ret;
+
+    if (!len) return FALSE;
+    if ((ret = (len < *size))) len++;
+    else SetLastError( ERROR_INSUFFICIENT_BUFFER );
+    *size = len;
+    return ret;
 }
 
 /******************************************************************************
diff --git a/dlls/dbghelp/dwarf.c b/dlls/dbghelp/dwarf.c
index a2d57173587..9ed63463513 100644
--- a/dlls/dbghelp/dwarf.c
+++ b/dlls/dbghelp/dwarf.c
@@ -4200,11 +4200,6 @@ BOOL dwarf2_parse(struct module* module, ULONG_PTR load_offset,
     struct module_format* dwarf2_modfmt;
     dwarf2_parse_module_context_t module_ctx;
 
-/* Our DWARF parser has been known to crash winedbg in some cases. Since
- * probably no concerned parties are going to be using plain winedbg, just don't
- * bother parsing anything. */
-return FALSE;
-
     if (!dwarf2_init_section(&eh_frame,                fmap, ".eh_frame",     NULL,             &eh_frame_sect))
         /* lld produces .eh_fram to avoid generating a long name */
         dwarf2_init_section(&eh_frame,                fmap, ".eh_fram",      NULL,             &eh_frame_sect);
diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
index 2fe9d93e76e..2fa5a1da88e 100644
--- a/dlls/kernelbase/process.c
+++ b/dlls/kernelbase/process.c
@@ -1232,21 +1232,6 @@ HANDLE WINAPI DECLSPEC_HOTPATCH OpenProcess( DWORD access, BOOL inherit, DWORD i
     attr.SecurityDescriptor = NULL;
     attr.SecurityQualityOfService = NULL;
 
-    /* PROTON HACK:
-     * On Windows, the Steam client puts its process ID into the registry
-     * at:
-     *
-     *   [HKCU\Software\Valve\Steam\ActiveProcess]
-     *   PID=dword:00000008
-     *
-     * Games get that pid from the registry and then query it with
-     * OpenProcess to ensure Steam is running. Since we aren't running the
-     * Windows Steam in Wine, instead we hack this magic number into the
-     * registry and then substitute the game's process itself in its place
-     * so it can query a valid process.
-     */
-    if (id == 0xfffe) id = GetCurrentProcessId();
-
     cid.UniqueProcess = ULongToHandle(id);
     cid.UniqueThread  = 0;
 
diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index 14fc568f0d2..6c068fd6afe 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -86,7 +86,7 @@ const WCHAR windows_dir[] = L"C:\\windows";
 const WCHAR system_dir[] = L"C:\\windows\\system32\\";
 
 /* system search path */
-static const WCHAR system_path[] = L"C:\\windows\\system32;C:\\windows\\system;C:\\windows;C:\\Program Files (x86)\\Steam";
+static const WCHAR system_path[] = L"C:\\windows\\system32;C:\\windows\\system;C:\\windows";
 
 static BOOL is_prefix_bootstrap;  /* are we bootstrapping the prefix? */
 static BOOL imports_fixup_done = FALSE;  /* set once the imports have been fixed up, before attaching them */
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index ef38691b15a..f525b614211 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -773,42 +773,11 @@ NTSTATUS exec_wineloader( char **argv, int socketfd, const pe_image_info_t *pe_i
     WORD machine = pe_info->machine;
     ULONGLONG res_start = pe_info->base;
     ULONGLONG res_end = pe_info->base + pe_info->map_size;
-    const char *ld_preload = getenv( "LD_PRELOAD" );
     char preloader_reserve[64], socket_env[64];
 
     if (pe_info->image_flags & IMAGE_FLAGS_WineFakeDll) res_start = res_end = 0;
     if (pe_info->image_flags & IMAGE_FLAGS_ComPlusNativeReady) machine = native_machine;
 
-    /* HACK: Unset LD_PRELOAD before executing explorer.exe to disable buggy gameoverlayrenderer.so */
-    if (ld_preload && argv[2] && !strcmp( argv[2], "C:\\windows\\system32\\explorer.exe" ) &&
-        argv[3] && !strcmp( argv[3], "/desktop" ))
-    {
-        static char const gorso[] = "gameoverlayrenderer.so";
-        static int gorso_len = sizeof(gorso) - 1;
-        int len = strlen( ld_preload );
-        char *next, *tmp, *env = malloc( sizeof("LD_PRELOAD=") + len );
-
-        if (!env) return STATUS_NO_MEMORY;
-        strcpy( env, "LD_PRELOAD=" );
-        strcat( env, ld_preload );
-
-        tmp = env + 11;
-        do
-        {
-            if (!(next = strchr( tmp, ':' ))) next = tmp + strlen( tmp );
-            if (next - tmp >= gorso_len && strncmp( next - gorso_len, gorso, gorso_len ) == 0)
-            {
-                if (*next) memmove( tmp, next + 1, strlen(next) );
-                else *tmp = 0;
-                next = tmp;
-            }
-            else tmp = next + 1;
-        }
-        while (*next);
-
-        putenv( env );
-    }
-
     signal( SIGPIPE, SIG_DFL );
 
     sprintf( socket_env, "WINESERVERSOCKET=%u", socketfd );
@@ -2140,22 +2109,8 @@ void *steamclient_handle_fault( LPCVOID addr, DWORD err )
     return NULL;
 }
 
-static void steamclient_write_jump(void *src_addr, void *tgt_addr)
-{
-#ifdef _WIN64
-    static const char mov[] = {0x48, 0xb8};
-#else
-    static const char mov[] = {0xb8};
-#endif
-    static const char jmp[] = {0xff, 0xe0};
-    memcpy(src_addr, mov, sizeof(mov));
-    memcpy((char *)src_addr + sizeof(mov), &tgt_addr, sizeof(tgt_addr));
-    memcpy((char *)src_addr + sizeof(mov) + sizeof(tgt_addr), jmp, sizeof(jmp));
-}
-
 static NTSTATUS steamclient_setup_trampolines( void *args )
 {
-    static int noexec_cached = -1;
     struct steamclient_setup_trampolines_params *params = args;
     HMODULE src_mod = params->src_mod, tgt_mod = params->tgt_mod;
     SYSTEM_BASIC_INFORMATION info;
@@ -2166,13 +2121,10 @@ static NTSTATUS steamclient_setup_trampolines( void *args )
     const DWORD *names;
     SIZE_T size;
     void *addr, *src_addr, *tgt_addr;
-    char *name, *wsne;
+    char *name;
     UINT_PTR page_mask;
     int i;
 
-    if (noexec_cached == -1)
-        noexec_cached = (wsne = getenv("WINESTEAMNOEXEC")) && atoi(wsne);
-
     virtual_get_system_info( &info, !!NtCurrentTeb()->WowTebOffset );
     page_mask = info.PageSize - 1;
 
@@ -2181,8 +2133,7 @@ static NTSTATUS steamclient_setup_trampolines( void *args )
         if (memcmp(src_sec[i].Name, ".text", 5)) continue;
         addr = (void *)(((UINT_PTR)src_mod + src_sec[i].VirtualAddress) & ~page_mask);
         size = (src_sec[i].Misc.VirtualSize + page_mask) & ~page_mask;
-        if (noexec_cached) mprotect(addr, size, PROT_READ);
-        else mprotect(addr, size, PROT_READ|PROT_WRITE|PROT_EXEC);
+        mprotect(addr, size, PROT_READ);
     }
 
     src_exp = get_module_data_dir( src_mod, IMAGE_FILE_EXPORT_DIRECTORY, NULL );
@@ -2196,8 +2147,7 @@ static NTSTATUS steamclient_setup_trampolines( void *args )
         assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
         steamclient_srcs[steamclient_count] = src_addr;
         steamclient_tgts[steamclient_count] = tgt_addr;
-        if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-        else steamclient_count++;
+        steamclient_count++;
     }
 
     src_addr = (void *)((UINT_PTR)src_mod + src_nt->OptionalHeader.AddressOfEntryPoint);
@@ -2205,8 +2155,7 @@ static NTSTATUS steamclient_setup_trampolines( void *args )
     assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
     steamclient_srcs[steamclient_count] = src_addr;
     steamclient_tgts[steamclient_count] = tgt_addr;
-    if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-    else steamclient_count++;
+    steamclient_count++;
 
     return STATUS_SUCCESS;
 }
diff --git a/dlls/secur32/secur32.c b/dlls/secur32/secur32.c
index bf94b1a594e..d703757bae7 100644
--- a/dlls/secur32/secur32.c
+++ b/dlls/secur32/secur32.c
@@ -1135,22 +1135,9 @@ BOOLEAN WINAPI GetUserNameExW(
             return FALSE;
         }
 
-    case NameDisplay:
-        {
-            static const WCHAR wineusernameW[] = {'W','I','N','E','U','S','E','R','N','A','M','E',0};
-
-            DWORD needed = GetEnvironmentVariableW(wineusernameW, NULL, 0);
-            if (*nSize < needed) {
-                *nSize = needed;
-                SetLastError(ERROR_MORE_DATA);
-                return FALSE;
-            }
-            *nSize = GetEnvironmentVariableW(wineusernameW, lpNameBuffer, *nSize);
-            return TRUE;
-        }
-
     case NameUnknown:
     case NameFullyQualifiedDN:
+    case NameDisplay:
     case NameUniqueId:
     case NameCanonical:
     case NameUserPrincipal:
diff --git a/dlls/winebus.sys/bus_sdl.c b/dlls/winebus.sys/bus_sdl.c
index f4414ae1f50..4ed55ce9c01 100644
--- a/dlls/winebus.sys/bus_sdl.c
+++ b/dlls/winebus.sys/bus_sdl.c
@@ -965,7 +965,7 @@ static void sdl_add_device(unsigned int index)
     SDL_JoystickID id;
     SDL_JoystickType joystick_type;
     SDL_GameController *controller = NULL;
-    const char *product, *sdl_serial, *str;
+    const char *product, *sdl_serial;
     char guid_str[33], buffer[ARRAY_SIZE(desc.product)];
     int axis_count, axis_offset;
 
@@ -1021,10 +1021,6 @@ static void sdl_add_device(unsigned int index)
         desc.pid = 0x028e;
     }
 
-    /* CW-Bug-Id: #20528 Check steam virtual controller indexes to keep them ordered */
-    if ((str = pSDL_JoystickName(joystick)) && sscanf(str, "Microsoft X-Box 360 pad %u", &desc.input) == 1) desc.input++;
-    else desc.input = -1;
-
     if (pSDL_JoystickGetSerial && (sdl_serial = pSDL_JoystickGetSerial(joystick)))
     {
         ntdll_umbstowcs(sdl_serial, strlen(sdl_serial) + 1, desc.serialnumber, ARRAY_SIZE(desc.serialnumber));
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 697203dd499..44b4261cf82 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -1055,19 +1055,8 @@ static void set_initial_wm_hints( Display *display, Window window )
     /* class hints */
     if ((class_hints = XAllocClassHint()))
     {
-        static char steam_proton[] = "steam_proton";
-        const char *app_id = getenv("SteamAppId");
-        char proton_app_class[128];
-
-        if(app_id && *app_id){
-            snprintf(proton_app_class, sizeof(proton_app_class), "steam_app_%s", app_id);
-            class_hints->res_name = proton_app_class;
-            class_hints->res_class = proton_app_class;
-        }else{
-            class_hints->res_name = steam_proton;
-            class_hints->res_class = steam_proton;
-        }
-
+        class_hints->res_name = process_name;
+        class_hints->res_class = process_name;
         XSetClassHint( display, window, class_hints );
         XFree( class_hints );
     }
diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 40dcd9eb0d2..1263d322587 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -335,7 +335,6 @@ HKCR,ftp\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
 HKCR,http\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
 HKCR,https\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
 HKCR,mailto\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
-HKCR,steam\shell\open\command,,,"""%16426%\Steam\Steam.exe"" -- ""%1"""
 
 [ContentIndex]
 HKLM,System\CurrentControlSet\Control\ContentIndex\Language\Neutral,"WBreakerClass",,"{369647e0-17b0-11ce-9950-00aa004bbb1f}"
diff --git a/programs/winedbg/debugger.h b/programs/winedbg/debugger.h
index 4d2b946162b..6368248cd08 100644
--- a/programs/winedbg/debugger.h
+++ b/programs/winedbg/debugger.h
@@ -304,7 +304,6 @@ extern	DWORD	                dbg_curr_tid;
 extern  dbg_ctx_t               dbg_context;
 extern  BOOL                    dbg_interactiveP;
 extern  HANDLE                  dbg_houtput;
-extern  HANDLE                  dbg_crash_report_file;
 extern  BOOL                    dbg_use_wine_dbg_output;
 
 struct dbg_internal_var
diff --git a/programs/winedbg/tgt_active.c b/programs/winedbg/tgt_active.c
index 5d660ab81dd..3c9b465e702 100644
--- a/programs/winedbg/tgt_active.c
+++ b/programs/winedbg/tgt_active.c
@@ -22,8 +22,6 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdarg.h>
-#include <time.h>
-#include <sys/stat.h>
 
 #include "debugger.h"
 #include "psapi.h"
@@ -799,48 +797,6 @@ static HANDLE create_temp_file(void)
                         NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_DELETE_ON_CLOSE, 0 );
 }
 
-static HANDLE create_crash_report_file(void)
-{
-    const char *dir = getenv("WINE_CRASH_REPORT_DIR");
-    const char *sgi;
-    char timestr[32];
-    char name[MAX_PATH], *c;
-    time_t t;
-    struct tm lt;
-
-    if(!dir || dir[0] == 0)
-        return INVALID_HANDLE_VALUE;
-
-    strcpy(name, dir);
-
-    for(c = name + 1; *c; ++c){
-        if(*c == '/'){
-            *c = 0;
-            CreateDirectoryA(name, NULL);
-            *c = '/';
-        }
-    }
-    CreateDirectoryA(name, NULL);
-
-    sgi = getenv("SteamGameId");
-
-    t = time(NULL);
-    lt = *localtime(&t);
-    strftime(timestr, ARRAY_SIZE(timestr), "%Y-%m-%d_%H:%M:%S", &lt);
-
-    /* /path/to/crash/reports/2021-05-18_13:21:15_appid-976310_crash.log */
-    snprintf(name, ARRAY_SIZE(name),
-            "%s%s/%s_appid-%s_crash.log",
-            dir[0] == '/' ? "Z:/" : "",
-            dir,
-            timestr,
-            sgi ? sgi : "0"
-            );
-
-    return CreateFileA( name, GENERIC_WRITE, FILE_SHARE_READ,
-                        NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0 );
-}
-
 static const struct
 {
     int type;
@@ -1024,7 +980,6 @@ enum dbg_start dbg_active_auto(int argc, char* argv[])
         break;
     case TRUE:
         dbg_use_wine_dbg_output = TRUE;
-        dbg_crash_report_file = create_crash_report_file();
         break;
     }
 
diff --git a/programs/winedbg/winedbg.c b/programs/winedbg/winedbg.c
index b2a1706117a..f0f02438934 100644
--- a/programs/winedbg/winedbg.c
+++ b/programs/winedbg/winedbg.c
@@ -82,7 +82,6 @@ DWORD	                dbg_curr_pid = 0;
 dbg_ctx_t               dbg_context;
 BOOL    	        dbg_interactiveP = FALSE;
 HANDLE                  dbg_houtput = 0;
-HANDLE                  dbg_crash_report_file = INVALID_HANDLE_VALUE;
 BOOL                    dbg_use_wine_dbg_output = FALSE;
 
 static struct list      dbg_process_list = LIST_INIT(dbg_process_list);
@@ -97,7 +96,10 @@ static void dbg_outputA(const char* buffer, int len)
     DWORD w, i;
 
     if (dbg_use_wine_dbg_output)
+    {
         __wine_dbg_output(buffer);
+        return;
+    }
 
     while (len > 0)
     {
@@ -112,10 +114,7 @@ static void dbg_outputA(const char* buffer, int len)
             if (len > 0) i = line_pos;  /* buffer is full, flush anyway */
             else break;
         }
-        if (!dbg_use_wine_dbg_output)
-            WriteFile(dbg_houtput, line_buff, i, &w, NULL);
-        if (dbg_crash_report_file != INVALID_HANDLE_VALUE)
-            WriteFile(dbg_crash_report_file, line_buff, i, &w, NULL);
+        WriteFile(dbg_houtput, line_buff, i, &w, NULL);
         memmove( line_buff, line_buff + i, line_pos - i );
         line_pos -= i;
     }
-- 
2.40.1

